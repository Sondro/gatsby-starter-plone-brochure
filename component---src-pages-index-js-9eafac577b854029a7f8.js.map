{"version":3,"sources":["webpack:///./src/components/Layout.js","webpack:///./src/typography.js","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/Helmet.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/Header.js"],"names":["Layout","_ref","children","createElement","Helmet","Header","concat","Parnassus","overrideThemeStyles","typography","Typography","headerFontFamily","scale","FixedContainer","styled","div","_templateObject","styles","white","FixedContainerBackdrop","_templateObject2","FixedContainerText","_templateObject3","HUGE","_templateObject4","join","Huge","h1","_templateObject5","Large","_templateObject6","Big","_templateObject7","Image","node","react_default","a","className","gatsby_image_default","fullwidth","imgStyle","height","fixed","image","childImageSharp","hero","alt","title","description","ResolveImage","images","data","byPath","reduce","map","set","_path","Map","get","src","byResolution","Object","keys","scales","download","style","display","marginLeft","marginRight","Document","_ref2","text","react","deserialize","components","Link","Img","Card","_ref3","CardContainer","_templateObject8","gray200","gray800","Folder","_ref4","nodes","_type","pages_Card","Row","_ref5","pages_Image","pages_Document","pages_Folder","query","IndexPage","_ref6","Layout_Layout","ploneSite","pages_Row","allPloneImage","edges","_ref7","m","module","exports","require","default","ProdPageRenderer","location","pageResources","React","InternalPageRenderer","assign","json","site","_public_static_d_2749024321_json__WEBPACK_IMPORTED_MODULE_0__","ReactHelmet","siteMetadata","htmlAttributes","lang","loader","enqueue","createContext","BrandLinkWrapper","span","_ref$className","_staticQueryData$data","_1154036612","file","to","loading"],"mappings":"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","file":"component---src-pages-index-js-9eafac577b854029a7f8.js","sourcesContent":["import { createElement } from 'react';\nimport { Helmet } from './Helmet';\nimport { Header } from './Header';\n\nexport const Layout = ({ children }) => {\n  return createElement(\n    'div',\n    {},\n    [createElement(Helmet, {}, []), createElement(Header)].concat(children)\n  );\n};\n","import Typography from 'typography';\nimport Parnassus from 'typography-theme-parnassus';\n\nParnassus.overrideThemeStyles = () => {\n  return {};\n};\n\nconst typography = new Typography(Parnassus);\n\nexport const { headerFontFamily } = Parnassus;\nexport const { scale } = typography;\nexport default typography;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { Layout } from '../components/Layout';\nimport Img from 'gatsby-image';\nimport { deserialize } from 'react-serialize';\nimport { headerFontFamily, scale } from '../typography';\nimport styled from 'styled-components';\nimport styles from '../styles/index.module.scss';\n\nconst FixedContainer = styled.div`\n  position: relative;\n  height: 80vh;\n  overflow: hidden;\n  color: ${styles.white};\n  &:nth-last-child(2) {\n    margin-bottom: 0 !important;\n  }\n`;\n\nconst FixedContainerBackdrop = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: black;\n  opacity: 0.4;\n`;\n\nconst FixedContainerText = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  display: flex;\n  align-items: center;\n  align-content: center;\n`;\n\nconst HUGE = styled.div`\n  font-family: ${headerFontFamily.join(', ')};\n  ${scale(2)};\n`;\n\nconst Huge = styled.h1`\n  font-family: ${headerFontFamily.join(', ')};\n  ${scale(1.75)};\n  font-weight: bold;\n  margin: 0;\n`;\n\nconst Large = styled.div`\n  ${scale(1)}\n`;\n\nconst Big = styled.div`\n  ${scale(0.5)}\n`;\n\nconst Image = ({ node }) => {\n  return (\n    <FixedContainer className=\"mb-6\">\n      <Img\n        className={styles.fullwidth}\n        imgStyle={{ height: '80vh' }}\n        fixed={node.image.childImageSharp.hero}\n        alt=\"\"\n      />\n      <FixedContainerBackdrop />\n      <FixedContainerText>\n        <div className=\"d-flex flex-column align-items-center text-center w-100\">\n          <HUGE>{node.title}</HUGE>\n          <Big>{node.description}</Big>\n        </div>\n      </FixedContainerText>\n    </FixedContainer>\n  );\n};\n\nconst ResolveImage = images => data => {\n  let byPath = images.reduce(\n    (map, image) => map.set(image._path, image),\n    new Map()\n  );\n  if (byPath.get(data.src)) {\n    let byResolution = Object.keys(byPath.get(data.src).image.scales).reduce(\n      (map, scale) =>\n        map.set(byPath.get(data.src).image.scales[scale].download, scale),\n      new Map()\n    );\n    return (\n      <Img\n        alt={data.alt || ''}\n        className={data.className}\n        style={\n          data.className !== 'image-inline'\n            ? {}\n            : {\n                display: 'block',\n                marginLeft: 'auto',\n                marginRight: 'auto',\n              }\n        }\n        fixed={\n          byPath.get(data.src).image.childImageSharp[\n            byResolution.get(data['data-download']) || 'mini'\n          ]\n        }\n      />\n    );\n  } else {\n    return (\n      <img src={data.src} alt={data.alt || ''} title={data.title || null} />\n    );\n  }\n};\n\n// For inline-images, see: https://collective.github.io/gatsby-source-plone/tutorial/6_richtext_component/\nconst Document = ({ node }) => {\n  return (\n    <div className=\"d-flex flex-column text-center my-4 mx-2\">\n      <Huge>{node.title}</Huge>\n      {node.text && node.text.react ? (\n        <Large className=\"mt-4\">\n          {deserialize(node.text.react, {\n            components: {\n              Link: () => null,\n              Img: () => null,\n            },\n          })}\n        </Large>\n      ) : null}\n    </div>\n  );\n};\n\nconst Card = ({ node, images }) => {\n  return (\n    <div className=\"d-flex flex-column flex-even my-4 px-4\">\n      <Large className=\"font-weight-bold\">{node.title}</Large>\n      {node.text && node.text.react ? (\n        <div className=\"mt-4\">\n          {deserialize(node.text.react, {\n            components: {\n              Link: () => null,\n              Img: ResolveImage(images),\n            },\n          })}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nconst CardContainer = styled.div`\n  &:last-child {\n    color: ${styles.gray200};\n    background: ${styles.gray800};\n    padding-top: 2rem;\n    padding-bottom: 2rem;\n  }\n`;\n\nconst Folder = ({ node, images }) => {\n  return (\n    <CardContainer className=\"d-flex flex-column flex-md-row\">\n      {(node.nodes || []).map(node => {\n        switch (node._type) {\n          case 'Document':\n            return <Card node={node} images={images} />;\n          default:\n            return null;\n        }\n      })}\n    </CardContainer>\n  );\n};\n\nconst Row = ({ node, images }) => {\n  switch (node._type) {\n    case 'Image':\n      return <Image node={node} />;\n    case 'Document':\n      return <Document node={node} />;\n    case 'Folder':\n      return <Folder node={node} images={images} />;\n    default:\n      return null;\n  }\n};\n\nconst IndexPage = ({ data }) => (\n  <Layout>\n    {data.ploneSite.nodes.map(node => (\n      <Row\n        node={node}\n        images={data.allPloneImage.edges.map(({ node }) => node)}\n      />\n    ))}\n  </Layout>\n);\n\nexport default IndexPage;\n\n// See: https://graphql.org/learn/queries/#inline-fragments\n\nexport const query = graphql`\n  fragment Document on PloneDocument {\n    _type\n    title\n    text {\n      react\n    }\n  }\n  fragment Image on PloneImage {\n    _type\n    _path\n    title\n    description\n    image {\n      childImageSharp {\n        hero: fixed(height: 1600) {\n          ...GatsbyImageSharpFixed\n        }\n        listing: fixed(width: 16) {\n          ...GatsbyImageSharpFixed\n        }\n        icon: fixed(width: 32) {\n          ...GatsbyImageSharpFixed\n        }\n        tile: fixed(width: 64) {\n          ...GatsbyImageSharpFixed\n        }\n        thumb: fixed(width: 128) {\n          ...GatsbyImageSharpFixed\n        }\n        mini: fixed(width: 200) {\n          ...GatsbyImageSharpFixed\n        }\n        preview: fixed(width: 400) {\n          ...GatsbyImageSharpFixed\n        }\n        large: fixed(width: 768) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n      scales {\n        listing {\n          download\n        }\n        icon {\n          download\n        }\n        tile {\n          download\n        }\n        thumb {\n          download\n        }\n        mini {\n          download\n        }\n        preview {\n          download\n        }\n        large {\n          download\n        }\n      }\n    }\n  }\n  query IndexPageQuery {\n    allPloneImage {\n      edges {\n        node {\n          ...Image\n        }\n      }\n    }\n    ploneSite {\n      nodes {\n        ... on PloneFolder {\n          _type\n          title\n          nodes {\n            ... on PloneDocument {\n              ...Document\n            }\n          }\n        }\n        ... on PloneDocument {\n          ...Document\n        }\n        ... on PloneImage {\n          ...Image\n        }\n      }\n    }\n  }\n`;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { createElement } from 'react';\nimport { default as ReactHelmet } from 'react-helmet';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nexport const Helmet = () => {\n  const { site } = useStaticQuery(graphql`\n    query HelmetQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n  return createElement(\n    ReactHelmet,\n    {\n      title: site.siteMetadata.title,\n      htmlAttributes: { lang: 'en' },\n    },\n    []\n  );\n};\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import { createElement } from 'react';\nimport Img from 'gatsby-image';\nimport { graphql, Link, useStaticQuery } from 'gatsby';\nimport styled from 'styled-components';\n\nconst BrandLinkWrapper = styled.span`\n  line-height: 0;\n  a {\n    box-shadow: none;\n  }\n`;\n\nexport const Header = ({ className = '', children }) => {\n  const { site, file } = useStaticQuery(graphql`\n    query logoQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n      file(relativePath: { eq: \"logo.png\" }) {\n        publicURL\n        childImageSharp {\n          fixed(height: 50) {\n            ...GatsbyImageSharpFixed_noBase64\n          }\n        }\n      }\n    }\n  `);\n  return createElement(\n    'header',\n    {\n      className: [\n        'd-flex flex-column flex-md-row align-items-center',\n        'p-3 px-md-4',\n        'bg-white',\n        'border-bottom',\n        className,\n      ].join(' '),\n    },\n    [\n      createElement(\n        'span',\n        {\n          className: [\n            'd-flex flex-row align-items-center',\n            'font-weight-normal',\n            'my-0 mr-auto',\n          ].join(' '),\n        },\n        [\n          createElement(BrandLinkWrapper, {}, [\n            createElement(\n              Link,\n              {\n                title: site.siteMetadata.title,\n                to: '/',\n              },\n              [\n                createElement(Img, {\n                  fixed: file.childImageSharp.fixed,\n                  loading: 'eager',\n                }),\n              ]\n            ),\n          ]),\n        ]\n      ),\n      createElement(\n        'nav',\n        {\n          className: ['d-none d-md-block', 'my-2 my-md-0 mr-md-3'].join(' '),\n        },\n        children\n      ),\n    ]\n  );\n};\n"],"sourceRoot":""}